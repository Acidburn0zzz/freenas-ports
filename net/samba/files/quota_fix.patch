commit 4525a992a5aa773609d60947c28a05ef5861a9f4
Author: Andrew Walker <awalker@ixsystems.com>
Date:   Mon Aug 24 18:06:52 2020 -0400

    Allow direct quota queries over SMB2

diff --git a/source3/smbd/nttrans.c b/source3/smbd/nttrans.c
index 8b3dcd87b5a..1002878d740 100644
--- a/source3/smbd/nttrans.c
+++ b/source3/smbd/nttrans.c
@@ -2724,7 +2724,14 @@ NTSTATUS smbd_do_query_getinfo_quota(TALLOC_CTX *mem_ctx,
 				   max_data_count,
 				   &blob,
 				   &qt_handle->tmp_list);
-	if (!NT_STATUS_IS_OK(status)) {
+
+	if (NT_STATUS_EQUAL(status, NT_STATUS_NO_MORE_ENTRIES)) {
+		*p_data = NULL;
+		*p_data_size = 0;
+		return NT_STATUS_OK;
+	}
+	else if (!NT_STATUS_IS_OK(status)) {
+		DBG_ERR("Failed fill_quota_buffer\n");
 		return status;
 	}
 	if (blob.length > max_data_count) {
diff --git a/source3/smbd/smb2_getinfo.c b/source3/smbd/smb2_getinfo.c
index f4fb7ce0b23..8207d321afd 100644
--- a/source3/smbd/smb2_getinfo.c
+++ b/source3/smbd/smb2_getinfo.c
@@ -20,6 +20,7 @@
 */
 
 #include "includes.h"
+#include "fake_file.h"
 #include "smbd/smbd.h"
 #include "smbd/globals.h"
 #include "../libcli/smb/smb_common.h"
@@ -557,14 +558,17 @@ static struct tevent_req *smbd_smb2_getinfo_send(TALLOC_CTX *mem_ctx,
 		ok = check_fsp_ntquota_handle(conn, smbreq, fsp);
 		if (!ok) {
 			DBG_INFO("no valid QUOTA HANDLE\n");
-			TALLOC_FREE(tmp_ctx);
-			tevent_req_nterror(req, NT_STATUS_INVALID_HANDLE);
-			return tevent_req_post(req, ev);
+			fsp->fake_file_handle = talloc_zero(tmp_ctx, struct fake_file_handle);
+			fsp->fake_file_handle->private_data = init_quota_handle(tmp_ctx);
+			fsp->fake_file_handle->type = FAKE_FILE_TYPE_QUOTA;
 		}
 
 		ndr_pull = ndr_pull_init_blob(&in_input_buffer, tmp_ctx);
 		if (!ndr_pull) {
 			TALLOC_FREE(tmp_ctx);
+			if (!ok) {
+				fsp->fake_file_handle = NULL;
+			}
 			tevent_req_nterror(req, NT_STATUS_NO_MEMORY);
 			return tevent_req_post(req, ev);
 		}
@@ -575,6 +579,9 @@ static struct tevent_req *smbd_smb2_getinfo_send(TALLOC_CTX *mem_ctx,
 
 		if (!NDR_ERR_CODE_IS_SUCCESS(err)) {
 			DBG_DEBUG("failed to pull smb2_query_quota_info\n");
+			if (!ok) {
+				fsp->fake_file_handle = NULL;
+			}
 			TALLOC_FREE(tmp_ctx);
 			tevent_req_nterror(req, NT_STATUS_INTERNAL_ERROR);
 			return tevent_req_post(req, ev);
@@ -593,6 +600,9 @@ static struct tevent_req *smbd_smb2_getinfo_send(TALLOC_CTX *mem_ctx,
 		if (info.start_sid_length != 0 || info.start_sid_offset != 0 ) {
 			DBG_INFO("illegal single sid query\n");
 			TALLOC_FREE(tmp_ctx);
+			if (!ok) {
+				fsp->fake_file_handle = NULL;
+			}
 			tevent_req_nterror(req, NT_STATUS_INVALID_PARAMETER);
 			return tevent_req_post(req, ev);
 		}
@@ -600,6 +610,9 @@ static struct tevent_req *smbd_smb2_getinfo_send(TALLOC_CTX *mem_ctx,
 		if (in_input_buffer.length < ndr_pull->offset) {
 			DBG_INFO("Invalid buffer length\n");
 			TALLOC_FREE(tmp_ctx);
+			if (!ok) {
+				fsp->fake_file_handle = NULL;
+			}
 			tevent_req_nterror(req, NT_STATUS_INVALID_PARAMETER);
 			return tevent_req_post(req, ev);
 		}
@@ -619,9 +632,15 @@ static struct tevent_req *smbd_smb2_getinfo_send(TALLOC_CTX *mem_ctx,
 
 		if (!NT_STATUS_IS_OK(status)) {
 			TALLOC_FREE(tmp_ctx);
+			if (!ok) {
+				fsp->fake_file_handle = NULL;
+			}
 			tevent_req_nterror(req, status);
 			return tevent_req_post(req, ev);
 		}
+		if (!ok) {
+			fsp->fake_file_handle = NULL;
+		}
 
 		state->out_output_buffer =
 			data_blob_talloc(state, data, data_size);
