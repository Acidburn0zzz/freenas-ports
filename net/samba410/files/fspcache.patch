diff --git a/docs-xml/smbdotconf/base/fspficache.xml b/docs-xml/smbdotconf/base/fspficache.xml
new file mode 100644
index 0000000..b1bcb36
--- /dev/null
+++ b/docs-xml/smbdotconf/base/fspficache.xml
@@ -0,0 +1,16 @@
+<samba:parameter name="fspcache backend"
+                 type="enum"
+                 context="G"
+                 enumlist="enum_fsp_fi_cache_type"
+                 xmlns:samba="http://www.samba.org/samba/DTD/samba-doc">
+
+<description>
+	<para>This parameter controls the data structure type 
+	used for lookups of open fsps.</para>
+
+	<para>The default is a linked list. Other options are "memcache" and
+	"db_hash". </para>
+
+</description>
+<value type="default">list</value>
+</samba:parameter>
diff --git a/lib/param/loadparm.h b/lib/param/loadparm.h
index 0b2e302..85fef07 100644
--- a/lib/param/loadparm.h
+++ b/lib/param/loadparm.h
@@ -226,6 +226,8 @@ enum dns_update_settings {DNS_UPDATE_OFF, DNS_UPDATE_ON, DNS_UPDATE_SIGNED};
 /* MDNS name sources */
 enum mdns_name_values {MDNS_NAME_NETBIOS, MDNS_NAME_MDNS};
 
+enum fsp_fi_cache_type {FSP_FI_LIST, FSP_FI_MEMCACHE, FSP_FI_DBHASH}; 
+
 /* LDAP SSL options */
 enum ldap_ssl_types {LDAP_SSL_OFF, LDAP_SSL_START_TLS};
 
diff --git a/lib/param/param_table.c b/lib/param/param_table.c
index f9d3b55..2995267 100644
--- a/lib/param/param_table.c
+++ b/lib/param/param_table.c
@@ -133,6 +133,13 @@ static const struct enum_list enum_mdns_name_values[] = {
 	{-1, NULL}
 };
 
+static const struct enum_list enum_fsp_fi_cache_type[] = {
+	{FSP_FI_LIST, "list"},
+	{FSP_FI_MEMCACHE, "memcache"},
+	{FSP_FI_DBHASH, "db_hash"},
+	{-1, NULL}
+}; 
+
 static const struct enum_list enum_tls_verify_peer_vals[] = {
 	{TLS_VERIFY_PEER_NO_CHECK,
 	 TLS_VERIFY_PEER_NO_CHECK_STRING},
diff --git a/lib/util/db_hash.c b/lib/util/db_hash.c
new file mode 100644
index 0000000..6c63a6f
--- /dev/null
+++ b/lib/util/db_hash.c
@@ -0,0 +1,295 @@
+/*
+   Using tdb as a hash table
+
+   Copyright (C) Amitay Isaacs  2015
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "replace.h"
+#include "system/filesys.h"
+
+#include <talloc.h>
+#include <tdb.h>
+
+#include "db_hash.h"
+
+struct db_hash_context {
+	struct tdb_context *db;
+};
+
+
+static int db_hash_destructor(struct db_hash_context *dh)
+{
+	if (dh->db != NULL) {
+		tdb_close(dh->db);
+		dh->db = NULL;
+	}
+	return 0;
+}
+
+int db_hash_init(TALLOC_CTX *mem_ctx, const char *name, int hash_size,
+		 enum db_hash_type type, struct db_hash_context **result)
+{
+	struct db_hash_context *dh;
+	int tdb_flags = TDB_INTERNAL | TDB_DISALLOW_NESTING;
+
+	dh = talloc_zero(mem_ctx, struct db_hash_context);
+	if (dh == NULL) {
+		return ENOMEM;
+	}
+
+	if (type == DB_HASH_COMPLEX) {
+		tdb_flags |= TDB_INCOMPATIBLE_HASH;
+	}
+
+	dh->db = tdb_open(name, hash_size, tdb_flags, O_RDWR|O_CREAT, 0);
+	if (dh->db == NULL) {
+		talloc_free(dh);
+		return ENOMEM;
+	}
+
+	talloc_set_destructor(dh, db_hash_destructor);
+	*result = dh;
+	return 0;
+}
+
+static int db_hash_map_tdb_error(struct db_hash_context *dh)
+{
+	enum TDB_ERROR tdb_err;
+	int ret;
+
+	tdb_err = tdb_error(dh->db);
+	switch (tdb_err) {
+		case TDB_SUCCESS:
+			ret = 0; break;
+		case TDB_ERR_OOM:
+			ret = ENOMEM; break;
+		case TDB_ERR_EXISTS:
+			ret = EEXIST; break;
+		case TDB_ERR_NOEXIST:
+			ret = ENOENT; break;
+		case TDB_ERR_EINVAL:
+			ret = EINVAL; break;
+		default:
+			ret = EIO; break;
+	}
+	return ret;
+}
+
+int db_hash_insert(struct db_hash_context *dh, uint8_t *keybuf, size_t keylen,
+		   uint8_t *databuf, size_t datalen)
+{
+	TDB_DATA key, data;
+	int ret;
+
+	if (dh == NULL) {
+		return EINVAL;
+	}
+
+	key.dptr = keybuf;
+	key.dsize = keylen;
+
+	data.dptr = databuf;
+	data.dsize = datalen;
+
+	ret = tdb_store(dh->db, key, data, TDB_INSERT);
+	if (ret != 0) {
+		ret = db_hash_map_tdb_error(dh);
+	}
+	return ret;
+}
+
+int db_hash_add(struct db_hash_context *dh, uint8_t *keybuf, size_t keylen,
+		uint8_t *databuf, size_t datalen)
+{
+	TDB_DATA key, data;
+	int ret;
+
+	if (dh == NULL) {
+		return EINVAL;
+	}
+
+	key.dptr = keybuf;
+	key.dsize = keylen;
+
+	data.dptr = databuf;
+	data.dsize = datalen;
+
+	ret = tdb_store(dh->db, key, data, TDB_REPLACE);
+	if (ret != 0) {
+		ret = db_hash_map_tdb_error(dh);
+	}
+	return ret;
+}
+
+int db_hash_delete(struct db_hash_context *dh, uint8_t *keybuf, size_t keylen)
+{
+	TDB_DATA key;
+	int ret;
+
+	key.dptr = keybuf;
+	key.dsize = keylen;
+
+	if (dh == NULL) {
+		return EINVAL;
+	}
+
+	ret = tdb_delete(dh->db, key);
+	if (ret != 0) {
+		ret = db_hash_map_tdb_error(dh);
+	}
+	return ret;
+}
+
+struct db_hash_fetch_state {
+	db_hash_record_parser_fn parser;
+	void *private_data;
+};
+
+static int db_hash_fetch_parser(TDB_DATA key, TDB_DATA data, void *private_data)
+{
+	struct db_hash_fetch_state *state =
+		(struct db_hash_fetch_state *)private_data;
+	int ret;
+
+	ret = state->parser(key.dptr, key.dsize, data.dptr, data.dsize,
+			    state->private_data);
+	return ret;
+}
+
+int db_hash_fetch(struct db_hash_context *dh, uint8_t *keybuf, size_t keylen,
+		  db_hash_record_parser_fn parser, void *private_data)
+{
+	struct db_hash_fetch_state state;
+	TDB_DATA key;
+	int ret;
+
+	if (dh == NULL || parser == NULL) {
+		return EINVAL;
+	}
+
+	state.parser = parser;
+	state.private_data = private_data;
+
+	key.dptr = keybuf;
+	key.dsize = keylen;
+
+	ret = tdb_parse_record(dh->db, key, db_hash_fetch_parser, &state);
+	if (ret == -1) {
+		return ENOENT;
+	}
+	return ret;
+}
+
+int db_hash_exists(struct db_hash_context *dh, uint8_t *keybuf, size_t keylen)
+{
+	TDB_DATA key;
+	int ret;
+
+	if (dh == NULL) {
+		return EINVAL;
+	}
+
+	key.dptr = keybuf;
+	key.dsize = keylen;
+
+	ret = tdb_exists(dh->db, key);
+	if (ret == 1) {
+		/* Key found */
+		ret = 0;
+	} else {
+		ret = db_hash_map_tdb_error(dh);
+		if (ret == 0) {
+			ret = ENOENT;
+		}
+	}
+	return ret;
+}
+
+struct db_hash_traverse_state {
+	db_hash_record_parser_fn parser;
+	void *private_data;
+};
+
+static int db_hash_traverse_parser(struct tdb_context *tdb,
+				   TDB_DATA key, TDB_DATA data,
+				   void *private_data)
+{
+	struct db_hash_traverse_state *state =
+		(struct db_hash_traverse_state *)private_data;
+
+	return state->parser(key.dptr, key.dsize, data.dptr, data.dsize,
+			     state->private_data);
+}
+
+int db_hash_traverse(struct db_hash_context *dh,
+		     db_hash_record_parser_fn parser, void *private_data,
+		     int *count)
+{
+	struct db_hash_traverse_state state;
+	int ret;
+
+	if (dh == NULL) {
+		return EINVAL;
+	}
+
+	/* Special case, for counting records */
+	if (parser == NULL) {
+		ret = tdb_traverse_read(dh->db, NULL, NULL);
+	} else {
+		state.parser = parser;
+		state.private_data = private_data;
+
+		ret = tdb_traverse_read(dh->db, db_hash_traverse_parser, &state);
+	}
+
+	if (ret == -1) {
+		ret = db_hash_map_tdb_error(dh);
+	} else {
+		if (count != NULL) {
+			*count = ret;
+		}
+		ret = 0;
+	}
+
+	return ret;
+}
+
+int db_hash_traverse_update(struct db_hash_context *dh,
+			    db_hash_record_parser_fn parser,
+			    void *private_data, int *count)
+{
+	struct db_hash_traverse_state state;
+	int ret;
+
+	if (dh == NULL || parser == NULL) {
+		return EINVAL;
+	}
+
+	state.parser = parser;
+	state.private_data = private_data;
+
+	ret = tdb_traverse(dh->db, db_hash_traverse_parser, &state);
+	if (ret == -1) {
+		ret = db_hash_map_tdb_error(dh);
+	} else {
+		if (count != NULL) {
+			*count = ret;
+		}
+		ret = 0;
+	}
+
+	return ret;
+}
diff --git a/lib/util/db_hash.h b/lib/util/db_hash.h
new file mode 100644
index 0000000..67e2b85
--- /dev/null
+++ b/lib/util/db_hash.h
@@ -0,0 +1,174 @@
+/*
+   Using tdb as a hash table
+
+   Copyright (C) Amitay Isaacs  2015
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, see <http://www.gnu.org/licenses/>.
+*/
+
+#ifndef __CTDB_DB_HASH_H__
+#define __CTDB_DB_HASH_H__
+
+#include <talloc.h>
+#include <tdb.h>
+
+/**
+ * @file db_hash.h
+ *
+ * @brief Use tdb database as a hash table
+ *
+ * This uses in-memory tdb databases to create a fixed sized hash table.
+ */
+
+/**
+ * @brief Hash type to indicate the hashing function to use.
+ *
+ * DB_HASH_SIMPLE uses default hashing function
+ * DB_HASH_COMPLEX uses jenkins hashing function
+ */
+enum db_hash_type {
+	DB_HASH_SIMPLE,
+	DB_HASH_COMPLEX,
+};
+
+/**
+ * @brief Parser callback function called when fetching a record
+ *
+ * This function is called when fetching a record. This function should
+ * not modify key and data arguments.
+ *
+ * The function should return 0 on success and errno on error.
+ */
+typedef int (*db_hash_record_parser_fn)(uint8_t *keybuf, size_t keylen,
+					uint8_t *databuf, size_t datalen,
+					void *private_data);
+
+/**
+ * @brief Abstract structure representing tdb hash table
+ */
+struct db_hash_context;
+
+/**
+ * @brief Initialize tdb hash table
+ *
+ * This returns a new tdb hash table context which is a talloc context.  Freeing
+ * this context will free all the memory associated with the hash table.
+ *
+ * @param[in] mem_ctx Talloc memory context
+ * @param[in] name The name for the hash table
+ * @param[in] hash_size The size of the hash table
+ * @param[in] type The type of hashing function to use
+ * @param[out] result The new db_hash_context structure
+ * @return 0 on success, errno on failure
+ */
+int db_hash_init(TALLOC_CTX *mem_ctx, const char *name, int hash_size,
+		 enum db_hash_type type, struct db_hash_context **result);
+
+/**
+ * @brief Insert a record into the hash table
+ *
+ * The key and data can be any binary data.  Insert only if the record does not
+ * exist.  If the record already exists, return error.
+ *
+ * @param[in] dh The tdb hash table context
+ * @param[in] keybuf The key buffer
+ * @param[in] keylen The key length
+ * @param[in] databuf The data buffer
+ * @param[in] datalen The data length
+ * @return 0 on success, errno on failure
+ */
+int db_hash_insert(struct db_hash_context *dh, uint8_t *keybuf, size_t keylen,
+		   uint8_t *databuf, size_t datalen);
+
+/**
+ * @brief Add a record into the hash table
+ *
+ * The key and data can be any binary data.  If the record does not exist,
+ * insert the record.  If the record already exists, replace the record.
+ *
+ * @param[in] dh The tdb hash table context
+ * @param[in] keybuf The key buffer
+ * @param[in] keylen The key length
+ * @param[in] databuf The data buffer
+ * @param[in] datalen The data length
+ * @return 0 on success, errno on failure
+ */
+int db_hash_add(struct db_hash_context *dh, uint8_t *keybuf, size_t keylen,
+		uint8_t *databuf, size_t datalen); 
+/**
+ * @brief Delete a record from the hash table
+ *
+ * @param[in] dh The tdb hash table context
+ * @param[in] keybuf The key buffer
+ * @param[in] keylen The key length
+ * @return 0 on success, errno on failure
+ */
+int db_hash_delete(struct db_hash_context *dh, uint8_t *keybuf, size_t keylen);
+
+/**
+ * @brief Fetch a record from the hash table
+ *
+ * The key and data can be any binary data.
+ *
+ * @param[in] dh The tdb hash table context
+ * @param[in] keybuf The key buffer
+ * @param[in] keylen The key length
+ * @param[in] parser Function called when the matching record is found
+ * @param[in] private_data Private data to parser function
+ * @return 0 on success, errno on failure
+ */
+int db_hash_fetch(struct db_hash_context *dh, uint8_t *keybuf, size_t keylen,
+		  db_hash_record_parser_fn parser, void *private_data);
+
+/**
+ * @brief Check if a record exists in the hash table
+ *
+ * @param[in] dh The tdb hash table context
+ * @param[in] keybuf The key buffer
+ * @param[in] keylen The key length
+ * @return 0 if the record exists, errno on failure
+ */
+int db_hash_exists(struct db_hash_context *dh, uint8_t *keybuf, size_t keylen);
+
+/**
+ * @brief Traverse the database without modification
+ *
+ * The parser function should return non-zero value to stop traverse.
+ *
+ * @param[in] dh The tdb hash table context
+ * @param[in] parser Function called for each record
+ * @param[in] private_data Private data to parser function
+ * @param[out] count Number of records traversed
+ * @return 0 on success, errno on failure
+ */
+int db_hash_traverse(struct db_hash_context *dh,
+		     db_hash_record_parser_fn parser, void *private_data,
+		     int *count);
+
+/**
+ * @brief Traverse the database for modifications
+ *
+ * The parser function should return non-zero value to stop traverse.
+ *
+ * @param[in] dh The tdb hash table context
+ * @param[in] parser Function called for each record
+ * @param[in] private_data Private data to parser function
+ * @param[out] count Number of records traversed
+ * @return 0 on success, errno on failure
+ */
+int db_hash_traverse_update(struct db_hash_context *dh,
+			    db_hash_record_parser_fn parser,
+			    void *private_data, int *count);
+
+#endif /* __CTDB_DB_HASH_H__ */
diff --git a/lib/util/memcache.c b/lib/util/memcache.c
index 1e616bd..ad5220d 100644
--- a/lib/util/memcache.c
+++ b/lib/util/memcache.c
@@ -60,6 +60,7 @@ static bool memcache_is_talloc(enum memcache_number n)
 	case SINGLETON_CACHE_TALLOC:
 	case SHARE_MODE_LOCK_CACHE:
 	case GETWD_CACHE:
+	case ZSNAP_CACHE:
 	case VIRUSFILTER_SCAN_RESULTS_CACHE_TALLOC:
 		result = true;
 		break;
@@ -446,3 +447,25 @@ void memcache_flush(struct memcache *cache, enum memcache_number n)
 		node = next;
 	}
 }
+
+int memcache_traverse(struct memcache *cache,
+                      memcache_parser_fn fn, void *private_data,
+                      int *count)
+{
+	int ret = 0;
+	count = 0;
+	struct memcache_element *e = NULL;
+	struct memcache_element *next = NULL;
+	DATA_BLOB key, value;
+	
+	for (e = cache->mru; e != NULL; e = next) {
+		count++;
+		memcache_element_parse(e, &key, &value);
+		if (fn && fn(key.data, key.length, value.data, value.length, private_data)) {
+			/* They want us to terminate traversal */
+			return 0;
+                }
+		next = e->next;
+	}
+	return ret;
+}
diff --git a/lib/util/memcache.h b/lib/util/memcache.h
index 4331c2f..5e437e5 100644
--- a/lib/util/memcache.h
+++ b/lib/util/memcache.h
@@ -46,6 +46,8 @@ enum memcache_number {
 	SMB1_SEARCH_OFFSET_MAP,
 	SHARE_MODE_LOCK_CACHE,	/* talloc */
 	VIRUSFILTER_SCAN_RESULTS_CACHE_TALLOC, /* talloc */
+	FSP_FI_CACHE,
+	ZSNAP_CACHE,
 	DFREE_CACHE,
 };
 
@@ -114,4 +116,31 @@ void *memcache_lookup_talloc(struct memcache *cache, enum memcache_number n,
 
 void memcache_flush(struct memcache *cache, enum memcache_number n);
 
+/**
+ * @brief Parser callback function called when fetching a record
+ *
+ * This function is called when fetching a record. This function should
+ * not modify key and data arguments.
+ *
+ * The function should return 0 on success and errno on error.
+ */
+typedef int (*memcache_parser_fn)(uint8_t *keybuf, size_t keylen,
+				  uint8_t *databuf, size_t datalen,
+				  void *private_data);
+
+/**
+ * @brief Traverse memcache 
+ *
+ * The parser function should return non-zero value to stop traverse.
+ *
+ * @param[in] dh The tdb hash table context
+ * @param[in] parser Function called for each record
+ * @param[in] private_data Private data to parser function
+ * @param[out] count Number of records traversed
+ * @return 0 on success, errno on failure
+ */
+int memcache_traverse(struct memcache *cache,
+		      memcache_parser_fn parser, void *private_data,
+		      int *count);
+
 #endif
diff --git a/lib/util/wscript_build b/lib/util/wscript_build
index c6188ed..7a10015 100644
--- a/lib/util/wscript_build
+++ b/lib/util/wscript_build
@@ -123,9 +123,9 @@ else:
                     idtree_random.c base64.c
                     util_str.c util_str_common.c ms_fnmatch.c
                     server_id.c dprintf.c
-                    tevent_debug.c memcache.c unix_match.c tfork.c''',
+                    tevent_debug.c memcache.c unix_match.c tfork.c db_hash.c''',
                   deps='samba-util-core DYNCONFIG close-low-fd tiniparser genrand util_str_hex',
-                  public_deps='talloc tevent execinfo pthread LIBCRYPTO charset util_setid',
+                  public_deps='talloc tdb tevent execinfo pthread LIBCRYPTO charset util_setid',
                   public_headers='''
                                  attr.h
                                  byteorder.h
diff --git a/source3/include/vfs.h b/source3/include/vfs.h
index 8c35fa5..86d5705 100644
--- a/source3/include/vfs.h
+++ b/source3/include/vfs.h
@@ -305,6 +305,7 @@ struct fd_handle {
 
 struct fsp_lease {
 	size_t ref_count;
+	struct file_id file_id;
 	struct smbd_server_connection *sconn;
 	struct tevent_timer *timeout;
 	struct smb2_lease lease;
diff --git a/source3/smbd/files.c b/source3/smbd/files.c
index 99b4937..e663576 100644
--- a/source3/smbd/files.c
+++ b/source3/smbd/files.c
@@ -23,8 +23,254 @@
 #include "libcli/security/security.h"
 #include "util_tdb.h"
 #include "lib/util/bitmap.h"
+#include "../ctdb/common/db_hash.h"
+#include "../lib/util/memcache.h"
 
 #define FILE_HANDLE_OFFSET 0x1000
+#define FSP_FI_TABLE "fsp_fi_table"
+
+#if 0
+struct fspcache_list {
+	struct files_struct *entries;
+	int nentries;
+};
+#endif
+
+struct smbpid_vuid {
+	uint16_t smbpid;
+	uint64_t vuid; 
+};
+
+struct fsp_fd {
+	int fd;
+	struct files_struct **fsp;
+};
+
+typedef int (*fspcache_cb)(uint8_t *keybuf, size_t keylen,
+			   uint8_t *databuf, size_t datalen,
+			   void *private_data);
+
+struct files_forall_priv {
+	struct files_struct *(*fn)(struct files_struct *fsp, void *private_data);
+	void *private_data; 
+	struct files_struct **retfsp;
+};
+/*
+ * 
+ */
+static int get_fsp_fi_parser(uint8_t *keybuf, size_t keylen,
+			     uint8_t *databuf, size_t datalen,
+			     void *private_data)
+{
+	struct fspcache_list *ret_fsplist = NULL;
+	struct fspcache_list **entry =
+		(struct fspcache_list **)private_data;
+
+	SMB_ASSERT(datalen == sizeof(*entry));
+
+	ret_fsplist = talloc_get_type_abort(*(void **)databuf,
+				       struct fspcache_list);
+
+	DBG_ERR("ret_fsplist for [%s] has nentries: [%d]\n",
+		fsp_str_dbg(ret_fsplist->entries), ret_fsplist->nentries);
+	*entry = ret_fsplist;
+						
+	return 0;
+}
+
+int fsplist_append(struct smbd_server_connection *sconn,
+		   struct files_struct *fsp)
+{
+	int ret;
+	enum fsp_fi_cache_type backend;
+	backend = sconn->fsp_fi_table.backend_type;
+	SMB_ASSERT(sconn->fsp_fi_table.initialized);
+	struct fspcache_list *fsplist = NULL;
+	if (backend == FSP_FI_DBHASH) {
+		ret = db_hash_fetch(sconn->fsp_fi_table.fi_u.dh,
+				    (uint8_t *)&fsp->file_id,
+				    sizeof(fsp->file_id),
+				    get_fsp_fi_parser, &fsplist);
+
+		if (fsplist == NULL) {
+			DBG_INFO("Generating new fspcache entry for [%s]"
+				 "with fileid: [%s]\n", fsp_str_dbg(fsp),
+				 file_id_string_tos(&fsp->file_id));
+			fsplist = talloc_zero(sconn, struct fspcache_list);	
+		}
+		DLIST_ADD(fsplist->entries, fsp);
+		fsplist->nentries++;
+		ret = db_hash_add(sconn->fsp_fi_table.fi_u.dh,
+				  (uint8_t *)&fsp->file_id,
+				  sizeof(fsp->file_id),
+				  (void *)&fsplist, sizeof(fsplist)); 
+	}
+	else if (backend == FSP_FI_MEMCACHE) {
+		DATA_BLOB key;
+		DATA_BLOB val;
+		key.data = (void *)&fsp->file_id;
+		key.length = sizeof(fsp->file_id);
+
+		ret = memcache_lookup(sconn->fsp_fi_table.fi_u.dm, FSP_FI_CACHE, key, &val);
+		
+		if (!ret) {
+			DBG_INFO("Generating new fspcache entry for [%s]"
+				 "with fileid: [%s]\n", fsp_str_dbg(fsp),
+				 file_id_string_tos(&fsp->file_id));
+			fsplist = talloc_zero(sconn, struct fspcache_list);	
+		}
+		else {
+			fsplist = (struct fspcache_list *)val.data;
+		}
+		DLIST_ADD(fsplist->entries, fsp);
+		fsplist->nentries++;
+		val.data = (void*)&fsplist;
+		val.length = sizeof(fsplist);
+		memcache_add(sconn->fsp_fi_table.fi_u.dm,
+			     FSP_FI_CACHE, key, val);
+	}
+	else {
+		return 0;
+	}
+	if (ret != 0) {
+		DBG_ERR("Failed to add fsp [%s] to fsplist %p\n",
+			fsp_str_dbg(fsp), fsplist);
+	}
+#if 0
+	DLIST_ADD(fsplist->entries, fsp);
+	fsplist->nentries++;
+#endif
+	sconn->fsp_fi_table.nentries++;
+	return ret;
+}
+
+int fspcache_traverse(struct smbd_server_connection *sconn,
+		      fspcache_cb cb,
+		      void *private_data,
+		      int *count)
+{
+	int ret = 0;
+	enum fsp_fi_cache_type backend;
+	DATA_BLOB key;
+	backend = sconn->fsp_fi_table.backend_type;
+	if (!sconn->fsp_fi_table.initialized) {
+		DBG_INFO("fsp_fi_table is not initialized.\n");
+		return -1;
+	}
+	if (backend == FSP_FI_DBHASH) {
+		ret = db_hash_traverse(sconn->fsp_fi_table.fi_u.dh, cb, private_data, count);
+	}
+	else if (backend == FSP_FI_MEMCACHE) {
+		ret = memcache_traverse(sconn->fsp_fi_table.fi_u.dm, cb, private_data, count);
+	}
+	else if (backend == FSP_FI_LIST) {
+		ret = cb(NULL, 0, (void *)&sconn->fsp_fi_table.fi_u.dl,
+			 sizeof(sconn->fsp_fi_table.fi_u.dl), private_data);
+	}
+	return ret;
+}
+
+int fspcache_get(struct smbd_server_connection *sconn,
+		 struct file_id id,
+		 struct fspcache_list **fsplist)
+		 
+{
+	int ret = 0;
+	enum fsp_fi_cache_type backend;
+	backend = sconn->fsp_fi_table.backend_type;
+	if (backend == FSP_FI_DBHASH) {
+		ret = db_hash_fetch(sconn->fsp_fi_table.fi_u.dh,
+				    (uint8_t *)&id, sizeof(id),
+			    	    get_fsp_fi_parser, fsplist);
+
+	}
+	else if (backend == FSP_FI_MEMCACHE) {
+		DATA_BLOB key;
+		DATA_BLOB val;
+		key.data = (void *)&id;
+		key.length = sizeof(id);
+
+		ret = memcache_lookup(sconn->fsp_fi_table.fi_u.dm, FSP_FI_CACHE, key, &val);
+		if (ret) {
+			*fsplist = (struct fspcache_list *)val.data;
+			ret = 0;
+		}
+		else {
+			DBG_ERR("Failed to lookup memcache entry\n");
+			ret = -1;
+		}
+	}
+	else {
+		*fsplist = sconn->fsp_fi_table.fi_u.dl;
+	}
+	return ret;
+}
+
+int fspcache_destroy(struct smbd_server_connection *sconn,
+		     struct file_id id)
+{
+	int ret = 0;
+	DATA_BLOB key;
+	enum fsp_fi_cache_type backend;
+	backend = sconn->fsp_fi_table.backend_type;
+
+	if (backend == FSP_FI_DBHASH) {
+		ret = db_hash_delete(sconn->fsp_fi_table.fi_u.dh, (uint8_t *)&id,
+				     sizeof(id));
+	}
+	else if (backend == FSP_FI_MEMCACHE) {
+		key.data = (void *)&id;
+		key.length = sizeof(id);
+		memcache_delete(sconn->fsp_fi_table.fi_u.dm, FSP_FI_CACHE, key); 
+	}
+	else {
+		return 0;
+	}
+	if (ret != 0) {
+		DBG_ERR("failed to delete cache entry: [%s]\n",
+			strerror(ret));
+	}
+
+	sconn->fsp_fi_table.nentries--;
+	return ret;
+}
+
+static void fspcache_init(TALLOC_CTX *mem_ctx, struct smbd_server_connection *sconn,
+		  struct fsp_fi_table *c)
+{
+	int ret = 0;
+	c->backend_type = lp_fspcache_backend();
+	SMB_ASSERT(c->backend_type != -1);
+	DBG_INFO("Initializing fsp_fi backend = %d\n", c->backend_type);
+	switch (c->backend_type) {
+		case FSP_FI_LIST:
+			c->fi_u.dl = talloc_zero(mem_ctx, struct fspcache_list); 
+			if (c->fi_u.dl == NULL) {
+				DBG_ERR("Failed to allocate fspcache_list\n");
+				ret = -1;
+			}
+                        break;
+                case FSP_FI_DBHASH:
+			ret = db_hash_init(mem_ctx, FSP_FI_TABLE,
+					   sconn->real_max_open_files,
+					   DB_HASH_COMPLEX,
+					   &c->fi_u.dh);
+			if (ret != 0) {
+				DBG_ERR("Failed to initialize hash table: %s\n",
+					strerror(errno));
+			}
+			break;
+		case FSP_FI_MEMCACHE:
+			c->fi_u.dm = memcache_init(mem_ctx, 0); 
+			if (c->fi_u.dm == NULL) {
+				DBG_ERR("Failed to initialize memcache\n");
+				ret = -1;
+			}
+			break;
+	}
+	SMB_ASSERT(ret == 0);
+	c->initialized = true;
+}
 
 /**
  * create new fsp to be used for file_new or a durable handle reconnect
@@ -33,6 +279,7 @@ NTSTATUS fsp_new(struct connection_struct *conn, TALLOC_CTX *mem_ctx,
 		 files_struct **result)
 {
 	NTSTATUS status = NT_STATUS_NO_MEMORY;
+	int ret;
 	files_struct *fsp = NULL;
 	struct smbd_server_connection *sconn = conn->sconn;
 
@@ -66,9 +313,16 @@ NTSTATUS fsp_new(struct connection_struct *conn, TALLOC_CTX *mem_ctx,
 	fsp->fnum = FNUM_FIELD_INVALID;
 	fsp->conn = conn;
 
-	DLIST_ADD(sconn->files, fsp);
-	sconn->num_files += 1;
+	/* Lazy initialize the cache. */
+	if (!sconn->fsp_fi_table.initialized) {
+		DBG_ERR("Initializing fsp_fi_cache\n");
+		fspcache_init(conn, sconn, &sconn->fsp_fi_table);
+	}
 
+	if (sconn->fsp_fi_table.backend_type == FSP_FI_LIST) {
+		DLIST_ADD(sconn->fsp_fi_table.fi_u.dl->entries, fsp);
+		sconn->fsp_fi_table.fi_u.dl->nentries++;
+	}
 	conn->num_files_open++;
 
 	*result = fsp;
@@ -133,9 +387,6 @@ NTSTATUS file_new(struct smb_request *req, connection_struct *conn,
 		return NT_STATUS_NO_MEMORY;
 	}
 
-	DEBUG(5,("allocated file structure %s (%u used)\n",
-		 fsp_fnum_dbg(fsp), (unsigned int)sconn->num_files));
-
 	if (req != NULL) {
 		fsp->mid = req->mid;
 		req->chain_fsp = fsp;
@@ -155,12 +406,21 @@ NTSTATUS file_new(struct smb_request *req, connection_struct *conn,
 /****************************************************************************
  Close all open files for a connection.
 ****************************************************************************/
-
-void file_close_conn(connection_struct *conn)
+static int file_close_conn_cb(uint8_t *keybuf, size_t keylen,
+			      uint8_t *databuf, size_t datalen,
+			      void *private_data)
 {
-	files_struct *fsp, *next;
+	struct fspcache_list *fsplist = NULL;
+	struct files_struct *fsp = NULL;
+	struct files_struct *next = NULL;
+	connection_struct *conn = NULL;
 
-	for (fsp=conn->sconn->files; fsp; fsp=next) {
+	conn = (connection_struct *)private_data;
+
+	fsplist = talloc_get_type_abort(*(void **)databuf,
+				       struct fspcache_list);
+	SMB_ASSERT(fsplist != NULL);
+	for (fsp=fsplist->entries; fsp; fsp=next) {
 		next = fsp->next;
 		if (fsp->conn != conn) {
 			continue;
@@ -173,25 +433,55 @@ void file_close_conn(connection_struct *conn)
 		}
 		close_file(NULL, fsp, SHUTDOWN_CLOSE);
 	}
+	return 0;
 }
 
+void file_close_conn(connection_struct *conn)
+{
+	int ret, count;
+	enum fsp_fi_cache_type backend;
+	ret = fspcache_traverse(conn->sconn, file_close_conn_cb, conn, &count);
+	DBG_ERR("closed [%d] fsplists\n", count);
+}
 /****************************************************************************
  Close all open files for a pid and a vuid.
 ****************************************************************************/
-
-void file_close_pid(struct smbd_server_connection *sconn, uint16_t smbpid,
-		    uint64_t vuid)
+static int file_close_pid_cb(uint8_t *keybuf, size_t keylen,
+			     uint8_t *databuf, size_t datalen,
+			     void *private_data)
 {
-	files_struct *fsp, *next;
-
-	for (fsp=sconn->files;fsp;fsp=next) {
+	struct fspcache_list *fsplist = NULL;
+	struct smbpid_vuid *sv = NULL;
+	struct files_struct *fsp = NULL;
+	struct files_struct *next = NULL;
+	fsplist = (struct fspcache_list *)databuf;
+	sv = (struct smbpid_vuid *)private_data;
+	SMB_ASSERT(fsplist != NULL);
+	for (fsp=fsplist->entries;fsp;fsp=next) {
 		next = fsp->next;
-		if ((fsp->file_pid == smbpid) && (fsp->vuid == vuid)) {
+		DLIST_REMOVE(fsplist->entries, fsp);
+		fsplist->nentries--;
+		if ((fsp->file_pid == sv->smbpid) && (fsp->vuid == sv->vuid)) {
 			close_file(NULL, fsp, SHUTDOWN_CLOSE);
 		}
 	}
+	return 0;
 }
 
+void file_close_pid(struct smbd_server_connection *sconn, uint16_t smbpid,
+		    uint64_t vuid)
+{
+	int ret, count;
+	struct smbpid_vuid *sv = NULL;
+	enum fsp_fi_cache_type backend;
+	backend = sconn->fsp_fi_table.backend_type;
+	sv->smbpid = smbpid;
+	sv->vuid = vuid;
+	ret = fspcache_traverse(sconn, file_close_pid_cb, sv, &count);
+	if (ret != 0) {
+		DBG_ERR("db_hash_traverse failed\n");
+	} 
+}
 /****************************************************************************
  Initialise file structures.
 ****************************************************************************/
@@ -250,22 +540,70 @@ bool file_init(struct smbd_server_connection *sconn)
 /****************************************************************************
  Close files open by a specified vuid.
 ****************************************************************************/
-
-void file_close_user(struct smbd_server_connection *sconn, uint64_t vuid)
+static int file_close_user_cb(uint8_t *keybuf, size_t keylen,
+			      uint8_t *databuf, size_t datalen,
+			      void *private_data)
 {
-	files_struct *fsp, *next;
-
-	for (fsp=sconn->files; fsp; fsp=next) {
+	struct fspcache_list *fsplist = NULL;
+	struct files_struct *fsp = NULL;
+	struct files_struct *next = NULL;
+	uint64_t vuid;
+
+	fsplist = talloc_get_type_abort(*(void **)databuf,
+				       struct fspcache_list);
+	vuid = *(uint64_t *)private_data;
+	SMB_ASSERT(fsplist != NULL);
+	for (fsp=fsplist->entries; fsp; fsp=next) {
 		next=fsp->next;
+		DLIST_REMOVE(fsplist->entries, fsp);
+		fsplist->nentries--;
 		if (fsp->vuid == vuid) {
 			close_file(NULL, fsp, SHUTDOWN_CLOSE);
 		}
 	}
+	return 0;
+}
+
+
+void file_close_user(struct smbd_server_connection *sconn, uint64_t vuid)
+{
+	int ret, count;
+	struct smbpid_vuid *sv = NULL;
+	sv->smbpid = 0;
+	sv->vuid = vuid;
+	ret = fspcache_traverse(sconn, file_close_user_cb, sv, &count);
+	if (ret != 0) {
+		DBG_ERR("db_hash_traverse failed\n");
+	} 
 }
 
 /*
  * Walk the files table until "fn" returns non-NULL
  */
+static int files_forall_cb(uint8_t *keybuf, size_t keylen,
+			   uint8_t *databuf, size_t datalen,
+			   void *private_data)
+{
+	struct fspcache_list *fsplist = NULL;
+	struct files_struct *fsp = NULL;
+	struct files_struct *next = NULL;
+	struct files_struct *found_fsp = NULL;
+	struct files_forall_priv *ffp = NULL;
+
+	fsplist = (struct fspcache_list *)databuf;
+	ffp = (struct files_forall_priv *)private_data;
+	SMB_ASSERT(fsplist != NULL);
+	for (fsp=fsplist->entries; fsp; fsp=next) {
+		struct files_struct *ret;
+		next = fsp->next;
+		found_fsp = ffp->fn(fsp, ffp->private_data);
+		if (found_fsp != NULL) {
+			*ffp->retfsp = found_fsp; 
+			return -1;
+		}
+	}
+	return 0;
+}
 
 struct files_struct *files_forall(
 	struct smbd_server_connection *sconn,
@@ -273,37 +611,55 @@ struct files_struct *files_forall(
 				   void *private_data),
 	void *private_data)
 {
+	int ret, count;
+	struct files_forall_priv *np;
+	np->fn = (*fn);
+	np->private_data = private_data;
 	struct files_struct *fsp, *next;
-
-	for (fsp = sconn->files; fsp; fsp = next) {
-		struct files_struct *ret;
-		next = fsp->next;
-		ret = fn(fsp, private_data);
-		if (ret != NULL) {
-			return ret;
-		}
-	}
+	ret = fspcache_traverse(sconn, files_forall_cb, np, &count);
+	if (ret != 0) {
+		return *np->retfsp;
+	} 
 	return NULL;
 }
 
 /****************************************************************************
  Find a fsp given a file descriptor.
 ****************************************************************************/
-
-files_struct *file_find_fd(struct smbd_server_connection *sconn, int fd)
+static int find_fd_cb(uint8_t *keybuf, size_t keylen,
+		      uint8_t *databuf, size_t datalen,
+		      void *private_data)
 {
-	int count=0;
-	files_struct *fsp;
-
-	for (fsp=sconn->files; fsp; fsp=fsp->next,count++) {
-		if (fsp->fh->fd == fd) {
-			if (count > 10) {
-				DLIST_PROMOTE(sconn->files, fsp);
+	struct fspcache_list *fsplist = NULL;
+	struct files_struct *fsp = NULL;
+	struct files_struct *next = NULL;
+	struct fsp_fd *fspfd = NULL;
+
+	fspfd = (struct fsp_fd *)private_data;
+	fsplist = (struct fspcache_list *)databuf;
+	SMB_ASSERT(fsplist != NULL);
+	for (fsp=fsplist->entries; fsp; fsp=next) {
+		if (fsp->fh->fd == fspfd->fd) {
+			if (fsplist->nentries > 10) {
+				DLIST_PROMOTE(fsplist->entries, fsp);
 			}
-			return fsp;
+			*fspfd->fsp = fsp;
+			return -1;
 		}
 	}
+	return 0;
+}
 
+files_struct *file_find_fd(struct smbd_server_connection *sconn, int fd)
+{
+	files_struct *fsp = NULL;
+	struct fsp_fd *fspfd = NULL;
+	int ret, count;
+	ret = fspcache_traverse(sconn, find_fd_cb, &fspfd, &count);
+	if (ret != 0) {
+		DBG_ERR("db_hash_traverse failed\n");
+		return *fspfd->fsp;
+	} 
 	return NULL;
 }
 
@@ -315,28 +671,30 @@ files_struct *file_find_dif(struct smbd_server_connection *sconn,
 			    struct file_id id, unsigned long gen_id)
 {
 	int count=0;
-	files_struct *fsp;
+	int ret;
+	files_struct *fsp = NULL;
+	struct fspcache_list *fsplist = NULL;
+	bool must_free_fis = false;
 
 	if (gen_id == 0) {
 		return NULL;
 	}
+	ret = fspcache_get(sconn, id, &fsplist);
 
-	for (fsp=sconn->files; fsp; fsp=fsp->next,count++) {
-		/* We can have a fsp->fh->fd == -1 here as it could be a stat open. */
-		if (file_id_equal(&fsp->file_id, &id) &&
-		    fsp->fh->gen_id == gen_id ) {
+	SMB_ASSERT(fsplist != NULL);
+	for (fsp=fsplist->entries; fsp; fsp=fsp->next,count++) {
+		if (fsp->fh->gen_id == gen_id) {
 			if (count > 10) {
-				DLIST_PROMOTE(sconn->files, fsp);
+				DLIST_PROMOTE(fsplist->entries, fsp);
 			}
 			/* Paranoia check. */
 			if ((fsp->fh->fd == -1) &&
 			    (fsp->oplock_type != NO_OPLOCK &&
 			     fsp->oplock_type != LEASE_OPLOCK)) {
-				DEBUG(0,("file_find_dif: file %s file_id = "
-					 "%s, gen = %u oplock_type = %u is a "
+				DEBUG(0,("file_find_dif: file %s "
+					 "gen = %u oplock_type = %u is a "
 					 "stat open with oplock type !\n",
 					 fsp_str_dbg(fsp),
-					 file_id_string_tos(&fsp->file_id),
 					 (unsigned int)fsp->fh->gen_id,
 					 (unsigned int)fsp->oplock_type ));
 				smb_panic("file_find_dif");
@@ -352,28 +710,46 @@ files_struct *file_find_dif(struct smbd_server_connection *sconn,
  Find the first fsp given a device and inode.
  We use a singleton cache here to speed up searching from getfilepathinfo
  calls.
+
+ If singleton cache lookup fails, then perform hashtable lookup and grab
+ head of fsplist. If this also fails, then cache the negative result.
 ****************************************************************************/
 
 files_struct *file_find_di_first(struct smbd_server_connection *sconn,
 				 struct file_id id)
 {
-	files_struct *fsp;
+	int ret;
+	files_struct *fsp = NULL;
+	struct fspcache_list *fsplist = NULL;
+	enum fsp_fi_cache_type backend;
+	backend = sconn->fsp_fi_table.backend_type;
 
 	if (file_id_equal(&sconn->fsp_fi_cache.id, &id)) {
 		/* Positive or negative cache hit. */
 		return sconn->fsp_fi_cache.fsp;
 	}
-
 	sconn->fsp_fi_cache.id = id;
 
-	for (fsp=sconn->files;fsp;fsp=fsp->next) {
-		if (file_id_equal(&fsp->file_id, &id)) {
-			/* Setup positive cache. */
-			sconn->fsp_fi_cache.fsp = fsp;
-			return fsp;
-		}
+	ret = fspcache_get(sconn, id, &fsplist);
+	if (ret != 0) {
+		DBG_ERR("Failed to retrieve fsp_fi_cache entry\n");
+		goto failure;
 	}
+	if (backend != FSP_FI_LIST) {
+		sconn->fsp_fi_cache.fsp = fsplist->entries;
+		return fsplist->entries;
+	}
+	else {
+		for (fsp=fsplist->entries;fsp;fsp=fsp->next) {
+			if (file_id_equal(&fsp->file_id, &id)) {
+				/* Setup positive cache. */
+				sconn->fsp_fi_cache.fsp = fsp;
+				return fsp;
+			}
+		}
 
+	}
+failure:
 	/* Setup negative cache. */
 	sconn->fsp_fi_cache.fsp = NULL;
 	return NULL;
@@ -398,11 +774,19 @@ files_struct *file_find_di_next(files_struct *start_fsp)
 
 struct files_struct *file_find_one_fsp_from_lease_key(
 	struct smbd_server_connection *sconn,
+	struct file_id id,
 	const struct smb2_lease_key *lease_key)
 {
-	struct files_struct *fsp;
+	int ret;
+	struct files_struct *fsp = NULL;
+	struct fspcache_list *fsplist = NULL;
+	ret = fspcache_get(sconn, id, &fsplist);
+	if (ret != 0) {
+		DBG_ERR("Failed to retrieve fsplist based on id\n");
+		return NULL;
+	}
 
-	for (fsp = sconn->files; fsp; fsp=fsp->next) {
+	for (fsp = fsplist->entries; fsp; fsp=fsp->next) {
 		if ((fsp->lease != NULL) &&
 		    (fsp->lease->lease.lease_key.data[0] ==
 		     lease_key->data[0]) &&
@@ -417,9 +801,9 @@ struct files_struct *file_find_one_fsp_from_lease_key(
 /****************************************************************************
  Find any fsp open with a pathname below that of an already open path.
 ****************************************************************************/
-
 bool file_find_subpath(files_struct *dir_fsp)
 {
+#if 0 /*Super optimization YOLO */
 	files_struct *fsp;
 	size_t dlen;
 	char *d_fullname = NULL;
@@ -461,6 +845,8 @@ bool file_find_subpath(files_struct *dir_fsp)
 
 	TALLOC_FREE(d_fullname);
 	return false;
+#endif /*optimization*/
+	return false;
 }
 
 /****************************************************************************
@@ -469,16 +855,38 @@ bool file_find_subpath(files_struct *dir_fsp)
 
 void fsp_free(files_struct *fsp)
 {
+	int ret;
 	struct smbd_server_connection *sconn = fsp->conn->sconn;
+	struct fspcache_list *fsplist = NULL;
+	const char *file_id_str;
+	bool must_free_fis = false;
+
+	fsplist = talloc_zero(fsp, struct fspcache_list);
 
 	if (fsp == sconn->fsp_fi_cache.fsp) {
 		ZERO_STRUCT(sconn->fsp_fi_cache);
 	}
+	ret = fspcache_get(sconn, fsp->file_id, &fsplist);
+	if (ret != 0) {
+		DBG_ERR("Failed to get fsplist for [%s]\n", fsp_str_dbg(fsp));
+		goto done;
+	}
 
-	DLIST_REMOVE(sconn->files, fsp);
-	SMB_ASSERT(sconn->num_files > 0);
-	sconn->num_files--;
-
+	/* fsplist is NULL if we got here through one of the *_cb functions for db_traverse */
+	if (fsplist == NULL || fsplist->nentries == 0) {
+		DBG_ERR("fsplist is NULL, exiting\n");
+		goto done;
+	}
+	if (fsplist->nentries == 1) {
+		DBG_ERR("Removing cache entry for [%s]\n", fsp_str_dbg(fsp));
+		fspcache_destroy(sconn, fsp->file_id);
+	}
+	else {
+		DBG_ERR("Removing entry for %s\n", fsp_str_dbg(fsp));
+		DLIST_REMOVE(fsplist->entries, fsp);
+		fsplist->nentries--;
+	}
+done:
 	TALLOC_FREE(fsp->fake_file_handle);
 
 	if (fsp->fh->ref_count == 1) {
@@ -496,7 +904,6 @@ void fsp_free(files_struct *fsp)
 	}
 
 	fsp->conn->num_files_open--;
-
 	/* this is paranoia, just in case someone tries to reuse the
 	   information */
 	ZERO_STRUCTP(fsp);
@@ -552,8 +959,10 @@ void file_free(struct smb_request *req, files_struct *fsp)
 
 	fsp_free(fsp);
 
+#if 0
 	DEBUG(5,("freed files structure %llu (%u used)\n",
 		 (unsigned long long)fnum, (unsigned int)sconn->num_files));
+#endif
 }
 
 /****************************************************************************
diff --git a/source3/smbd/globals.h b/source3/smbd/globals.h
index 02f1e58..3c95efb 100644
--- a/source3/smbd/globals.h
+++ b/source3/smbd/globals.h
@@ -21,6 +21,7 @@
 #include "system/select.h"
 #include "librpc/gen_ndr/smbXsrv.h"
 #include "smbprofile.h"
+#include "../ctdb/common/db_hash.h"
 
 #ifdef USE_DMAPI
 struct smbd_dmapi_context;
@@ -36,6 +37,22 @@ struct fsp_singleton_cache {
 	struct file_id id;
 };
 
+struct fspcache_list {
+        struct files_struct *entries;
+        int nentries;
+};
+
+struct fsp_fi_table {
+        union {
+        	struct db_hash_context *dh;
+		struct memcache *dm;		
+		struct fspcache_list *dl;
+        } fi_u;
+	enum fsp_fi_cache_type backend_type;
+	bool initialized;
+        size_t nentries;
+};
+
 extern const struct mangle_fns *mangle_fns;
 
 extern unsigned char *chartest;
@@ -889,10 +906,8 @@ struct smbd_server_connection {
 	size_t num_connections;
 	struct connection_struct *connections;
 
-	size_t num_files;
-	struct files_struct *files;
-
 	int real_max_open_files;
+	struct fsp_fi_table fsp_fi_table; 
 	struct fsp_singleton_cache fsp_fi_cache;
 
 	struct pending_message_list *deferred_open_queue;
diff --git a/source3/smbd/open.c b/source3/smbd/open.c
index de557f5..b8c3512 100644
--- a/source3/smbd/open.c
+++ b/source3/smbd/open.c
@@ -2080,7 +2080,7 @@ static NTSTATUS grant_fsp_lease(struct files_struct *fsp,
 		}
 
 		/* Ensure we're in sync with current lease state. */
-		fsp_lease_update(lck, fsp_client_guid(fsp), fsp->lease);
+		fsp_lease_update(lck, fsp->file_id, fsp_client_guid(fsp), fsp->lease);
 		return NT_STATUS_OK;
 	}
 
@@ -2959,6 +2959,7 @@ static NTSTATUS open_file_ntcreate(connection_struct *conn,
 	struct smb_filename *smb_fname = fsp->fsp_name;
 	int flags=0;
 	int flags2=0;
+	int ret;
 	bool file_existed = VALID_STAT(smb_fname->st);
 	bool def_acl = False;
 	bool posix_open = False;
@@ -3262,6 +3263,11 @@ static NTSTATUS open_file_ntcreate(connection_struct *conn,
 	}
 
 	fsp->file_id = vfs_file_id_from_sbuf(conn, &smb_fname->st);
+	fsp->file_id_str = file_id_string_tos(&fsp->file_id);
+ 	ret = fsplist_append(conn->sconn, fsp);	
+	if (ret != 0) {
+		DBG_ERR("failed to append to fsplist\n");
+	}
 	fsp->share_access = share_access;
 	fsp->fh->private_options = private_flags;
 	fsp->access_mask = open_access_mask; /* We change this to the
diff --git a/source3/smbd/oplock.c b/source3/smbd/oplock.c
index 31a3630..83c8382 100644
--- a/source3/smbd/oplock.c
+++ b/source3/smbd/oplock.c
@@ -354,7 +354,7 @@ static void lease_timeout_handler(struct tevent_context *ctx,
 	struct share_mode_lock *lck;
 	uint16_t old_epoch = lease->lease.lease_epoch;
 
-	fsp = file_find_one_fsp_from_lease_key(lease->sconn,
+	fsp = file_find_one_fsp_from_lease_key(lease->sconn, lease->file_id,
 					       &lease->lease.lease_key);
 	if (fsp == NULL) {
 		/* race? */
@@ -376,7 +376,7 @@ static void lease_timeout_handler(struct tevent_context *ctx,
 		return;
 	}
 
-	fsp_lease_update(lck, fsp_client_guid(fsp), lease);
+	fsp_lease_update(lck, fsp->file_id, fsp_client_guid(fsp), lease);
 
 	if (lease->lease.lease_epoch != old_epoch) {
 		/*
@@ -412,6 +412,7 @@ static void lease_timeout_handler(struct tevent_context *ctx,
 }
 
 bool fsp_lease_update(struct share_mode_lock *lck,
+		      const struct file_id id,
 		      const struct GUID *client_guid,
 		      struct fsp_lease *lease)
 {
@@ -522,7 +523,7 @@ static struct files_struct *downgrade_lease_fsps(struct files_struct *fsp,
 		return NULL;
 	}
 
-	fsp_lease_update(state->lck, fsp_client_guid(fsp), fsp->lease);
+	fsp_lease_update(state->lck, fsp->file_id, fsp_client_guid(fsp), fsp->lease);
 
 	return NULL;
 }
@@ -997,7 +998,7 @@ static void process_oplock_break_message(struct messaging_context *msg_ctx,
 			}
 
 			/* Ensure we're in sync with current lease state. */
-			fsp_lease_update(lck, fsp_client_guid(fsp), fsp->lease);
+			fsp_lease_update(lck, fsp->file_id, fsp_client_guid(fsp), fsp->lease);
 		}
 
 		TALLOC_FREE(lck);
diff --git a/source3/smbd/proto.h b/source3/smbd/proto.h
index 3662a92..1e2c9fc 100644
--- a/source3/smbd/proto.h
+++ b/source3/smbd/proto.h
@@ -394,6 +394,7 @@ struct files_struct *files_forall(
 				   void *private_data),
 	void *private_data);
 files_struct *file_find_fd(struct smbd_server_connection *sconn, int fd);
+int fsplist_append(struct smbd_server_connection *sconn, struct files_struct *fsp);
 files_struct *file_find_dif(struct smbd_server_connection *sconn,
 			    struct file_id id, unsigned long gen_id);
 files_struct *file_find_di_first(struct smbd_server_connection *sconn,
@@ -401,6 +402,7 @@ files_struct *file_find_di_first(struct smbd_server_connection *sconn,
 files_struct *file_find_di_next(files_struct *start_fsp);
 struct files_struct *file_find_one_fsp_from_lease_key(
 	struct smbd_server_connection *sconn,
+	struct file_id id,
 	const struct smb2_lease_key *lease_key);
 bool file_find_subpath(files_struct *dir_fsp);
 void fsp_free(files_struct *fsp);
@@ -734,6 +736,7 @@ bool remove_oplock_under_lock(files_struct *fsp, struct share_mode_lock *lck);
 bool remove_oplock(files_struct *fsp);
 bool downgrade_oplock(files_struct *fsp);
 bool fsp_lease_update(struct share_mode_lock *lck,
+		      const struct file_id id,
 		      const struct GUID *client_guid,
 		      struct fsp_lease *lease);
 NTSTATUS downgrade_lease(struct smbXsrv_connection *xconn,
diff --git a/source3/smbd/reply.c b/source3/smbd/reply.c
index a5fdcf6..02ab3df 100644
--- a/source3/smbd/reply.c
+++ b/source3/smbd/reply.c
@@ -6662,7 +6662,9 @@ NTSTATUS rename_internals_fsp(connection_struct *conn,
 	NTSTATUS status = NT_STATUS_OK;
 	struct share_mode_lock *lck = NULL;
 	uint32_t access_mask = SEC_DIR_ADD_FILE;
-	bool dst_exists, old_is_stream, new_is_stream;
+	bool dst_exists, old_is_stream, new_is_stream, is_same_fileid;
+	struct file_id fileid_src;
+	struct file_id fileid_dst;
 
 	status = check_name(conn, smb_fname_dst_in);
 	if (!NT_STATUS_IS_OK(status)) {
@@ -6674,10 +6676,17 @@ NTSTATUS rename_internals_fsp(connection_struct *conn,
 		return status;
 	}
 
+/*
+        FIXME: OS-X clients will set a RH lease on AFP_Resource streams which results
+        in a share-mode lock being set on a file. Which causes the following check to
+        prevent users from renaming the file until the OS-X client with the lease disconnects.
+        This is incorrect behavior per MS docs.
+ */
+/*
 	if (file_has_open_streams(fsp)) {
 		return NT_STATUS_ACCESS_DENIED;
 	}
-
+ */
 	/* Make a copy of the dst smb_fname structs */
 
 	smb_fname_dst = cp_smb_filename(ctx, smb_fname_dst_in);
@@ -6823,7 +6832,19 @@ NTSTATUS rename_internals_fsp(connection_struct *conn,
 
 	dst_exists = SMB_VFS_STAT(conn, smb_fname_dst) == 0;
 
-	if(!replace_if_exists && dst_exists) {
+	/*
+	 * Some filesystems are case-insensitive, but case-preserving
+	 * Compare fileid in this situation to determine whether the
+	 * source and destination are the same file. If this is the
+	 * case, then bypass these checks and hand off to VFS_RENAME
+	 * and hope that a VFS module is enabled that has special
+	 * handling for this situation.
+	 */
+	fileid_src = vfs_file_id_from_sbuf(conn, &fsp->fsp_name->st);
+	fileid_dst = vfs_file_id_from_sbuf(conn, &smb_fname_dst->st);
+	is_same_fileid = file_id_equal(&fileid_src, &fileid_dst);
+
+	if(!replace_if_exists && dst_exists && !is_same_fileid) {
 		DEBUG(3, ("rename_internals_fsp: dest exists doing rename "
 			  "%s -> %s\n", smb_fname_str_dbg(fsp->fsp_name),
 			  smb_fname_str_dbg(smb_fname_dst)));
@@ -6831,7 +6852,7 @@ NTSTATUS rename_internals_fsp(connection_struct *conn,
 		goto out;
 	}
 
-	if (dst_exists) {
+	if (dst_exists && !is_same_fileid) {
 		struct file_id fileid = vfs_file_id_from_sbuf(conn,
 		    &smb_fname_dst->st);
 		files_struct *dst_fsp = file_find_di_first(conn->sconn,
diff --git a/source3/smbd/trans2.c b/source3/smbd/trans2.c
index 5fbc6db..06a6cd6 100644
--- a/source3/smbd/trans2.c
+++ b/source3/smbd/trans2.c
@@ -211,9 +211,22 @@ NTSTATUS get_ea_value(TALLOC_CTX *mem_ctx,
 			struct ea_struct *pea)
 {
 	/* Get the value of this xattr. Max size is 64k. */
-	size_t attr_size = 256;
+	size_t attr_size = 0;
 	char *val = NULL;
 	ssize_t sizeret;
+	static size_t min_xattr_size = 0;
+	static size_t max_xattr_size = 0;
+
+	if (min_xattr_size == 0) {
+		min_xattr_size = (size_t)lp_parm_ulonglong(
+			SNUM(conn), "smbd", "min_xattr_size", 256);
+	}
+	attr_size = min_xattr_size;
+
+	if (max_xattr_size == 0) {
+		max_xattr_size = (size_t)lp_parm_ulonglong(
+			SNUM(conn), "smbd", "max_xattr_size", 16*1024*1024);
+	}
 
  again:
 
@@ -229,8 +242,8 @@ NTSTATUS get_ea_value(TALLOC_CTX *mem_ctx,
 				ea_name, val, attr_size);
 	}
 
-	if (sizeret == -1 && errno == ERANGE && attr_size != 65536) {
-		attr_size = 65536;
+	if (sizeret == -1 && errno == ERANGE && attr_size <= max_xattr_size) {
+		attr_size = max_xattr_size;
 		goto again;
 	}
 
@@ -3758,12 +3771,21 @@ cBytesSector=%u, cUnitTotal=%u, cUnitAvail=%d\n", (unsigned int)bsize, (unsigned
 
 			ZERO_STRUCT(fsp);
 			ZERO_STRUCT(quotas);
+			bool allowed_user;
+			if ((get_current_uid(conn) == 0) || (security_token_has_privilege(
+			   conn->session_info->security_token, SEC_PRIV_DISK_OPERATOR) == 0)) {
+				allowed_user = true;
+			}
+
+
 
 			fsp.conn = conn;
 			fsp.fnum = FNUM_FIELD_INVALID;
 
-			/* access check */
-			if (get_current_uid(conn) != 0) {
+			/* access check 
+ 			 * Allow access in case we have SEC_PRIV_DISK_OPERATOR.
+ 			 */
+			if ( !allowed_user ) {
 				DEBUG(0,("get_user_quota: access_denied "
 					 "service [%s] user [%s]\n",
 					 lp_servicename(talloc_tos(), SNUM(conn)),
@@ -4060,11 +4082,17 @@ static NTSTATUS smb_set_fsquota(connection_struct *conn,
 {
 	NTSTATUS status;
 	SMB_NTQUOTA_STRUCT quotas;
+	bool allowed_user;
+
+	if ((get_current_uid(conn) == 0) || (security_token_has_privilege(
+	   conn->session_info->security_token, SEC_PRIV_DISK_OPERATOR) == 0)) { 
+		allowed_user = true;
+	}
 
 	ZERO_STRUCT(quotas);
 
 	/* access check */
-	if ((get_current_uid(conn) != 0) || !CAN_WRITE(conn)) {
+	if ((!allowed_user) || !CAN_WRITE(conn)) {
 		DEBUG(3, ("set_fsquota: access_denied service [%s] user [%s]\n",
 			  lp_servicename(talloc_tos(), SNUM(conn)),
 			  conn->session_info->unix_info->unix_name));
